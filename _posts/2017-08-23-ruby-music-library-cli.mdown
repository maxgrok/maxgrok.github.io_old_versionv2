---
layout: post
title: "Stuck & Unstuck: Music Library CLI"
comments: true
archive: false
date: 2017-08-24T10:30:28-04:00
---

This is one of the final projects in the Ruby track for the Flatiron School Community-Based Bootcamp. <br>

Here's a breakdown of the instructions: 
(1) Create an Artist, Song, and Genre class
<ul>
	<li>All classes accept a name on initialization</li>
	<li>All classes have a class variable of an array called all that is accessible via the class method .all</li>
	<li>All classes have a .destroy_all method that resets the class variable 'all' array to an empty array</li>
	<li>All classes have a custom constructor of .create</li> 
	<li>All classes have a method #save to save the instance of the class into their class variable 'all' array</li>
</ul>

(2) Map Relationships Between Classes
<ul>
	<li><em>Song and Artist</em></li>
		<ul>
			<li>Songs belong to an artist.</li>
			<li>Artist has many songs.</li>
			<li>Adding songs to an artist is done by calling an #add_song method on an instance of the artist class.</li>
			<li>Songs can be initialized with an optional artist.</li>
		</ul>
	<li><em>Song and Genre</em></li>
	<li><em>Artist and Genre</em></li>
</ul>
Now, I was just stuck on the <em>Song#artist=</em> method. <br><br>
I just got unstuck by refactoring the Song#artist= method from: 
{% highlight ruby linenos %}

	def artist=(artist)
		#artist.name = @name
		#artist.add_song(@@all)
		self.artist.add_song(self)
	end 

{% end %}

to:
{% highlight ruby linenos %}

	def artist=(artist)
		#artist.name = @name
		#artist.add_song(@@all)
		if artist == nil
			@artist = artist
		elsif artist != nil
			@artist = artist
			artist.add_song(self)
		end
	end 
{% end %}

The above edit accounts for what to do if artist is nil, as well as not nil. The problem I was having before is that artist.add_song(self) was not sufficient because I was not defining the artist as equal to an instance variable of @artist <em>first</em>. 




